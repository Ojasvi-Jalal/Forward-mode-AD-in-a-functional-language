package evaluation

import automaticDifferentiation.AutomaticDifferentiate
import differentiate.DifferentiateExpr
import eval.{DoubleEvaluator, Evaluator}
import scala.collection.mutable
import scala.collection.mutable.Queue
import intermediateRep.{Array, Expr, Param}

object ExprVectorScalar extends App {
//
//  var evalAll :Queue[Double] = _
//  var ADAll= Queue[Double]()
//  var ADEvalAll= Queue[Double]()
//  var SDAll= Queue[Double]()
//  var SDEvalAll= Queue[Double]()
//
//  ARRAY LENGTH 2*******************************************
//    Eval:0.250679ms
//    ***********************************************
//  AD time:0.5576825ms
//    ***********************************************
//  AD eval time:0.22024349999999998ms
//    ***********************************************
//  ***********************************************
//  SD time:0.20610399999999998ms
//    ***********************************************
//  SD eval time:0.1442905ms
//    ARRAY LENGTH 16*******************************************
//    Eval:0.91692ms
//    ***********************************************
//  AD time:0.685932ms
//    ***********************************************
//  AD eval time:0.2517875ms
//    ***********************************************
//  ***********************************************
//  SD time:0.11350249999999999ms
//    ***********************************************
//  SD eval time:0.218904ms
//    ARRAY LENGTH 30*******************************************
//    Eval:0.2381555ms
//    ***********************************************
//  AD time:0.43666299999999997ms
//    ***********************************************
//  AD eval time:0.35785ms
//    ***********************************************
//  ***********************************************
//  SD time:0.1588605ms
//    ***********************************************
//  SD eval time:0.48720149999999995ms
//    ARRAY LENGTH 44*******************************************
//    Eval:0.20422649999999998ms
//    ***********************************************
//  AD time:0.5681554999999999ms
//    ***********************************************
//  AD eval time:0.151617ms
//    ***********************************************
//  ***********************************************
//  SD time:0.11558449999999999ms
//    ***********************************************
//  SD eval time:0.1129115ms
//    ARRAY LENGTH 58*******************************************
//    Eval:0.187103ms
//    ***********************************************
//  AD time:0.47497649999999997ms
//    ***********************************************
//  AD eval time:0.1457095ms
//    ***********************************************
//  ***********************************************
//  SD time:0.14484149999999998ms
//    ***********************************************
//  SD eval time:0.146431ms
//    ARRAY LENGTH 72*******************************************
//    Eval:0.219805ms
//    ***********************************************
//  AD time:0.491316ms
//    ***********************************************
//  AD eval time:0.1824925ms
//    ***********************************************
//  ***********************************************
//  SD time:0.16239699999999999ms
//    ***********************************************
//  SD eval time:0.178121ms
//    ARRAY LENGTH 86*******************************************
//    Eval:0.2855625ms
//    ***********************************************
//  AD time:0.49767599999999995ms
//    ***********************************************
//  AD eval time:0.22285649999999999ms
//    ***********************************************
//  ***********************************************
//  SD time:0.190105ms
//    ***********************************************
//  SD eval time:0.269677ms
//    ARRAY LENGTH 100*******************************************
//    Eval:0.5230899999999999ms
//    ***********************************************
//  AD time:0.9955809999999999ms
//    ***********************************************
//  AD eval time:0.48476149999999996ms
//    ***********************************************
//  ***********************************************
//  SD time:0.526438ms
//    ***********************************************
//  SD eval time:0.298083ms
//    ARRAY LENGTH 114*******************************************
//    Eval:0.513178ms
//    ***********************************************
//  AD time:0.6732005ms
//    ***********************************************
//  AD eval time:0.32589049999999997ms
//    ***********************************************
//  ***********************************************
//  SD time:0.269756ms
//    ***********************************************
//  SD eval time:0.250397ms
//    ARRAY LENGTH 128*******************************************
//    Eval:0.3946865ms
//    ***********************************************
//  AD time:0.544366ms
//    ***********************************************
//  AD eval time:0.252639ms
//    ***********************************************
//  ***********************************************
//  SD time:0.271096ms
//    ***********************************************
//  SD eval time:0.2447115ms
//    ARRAY LENGTH 142*******************************************
//    Eval:0.42202599999999996ms
//    ***********************************************
//  AD time:0.68046ms
//    ***********************************************
//  AD eval time:0.242771ms
//    ***********************************************
//  ***********************************************
//  SD time:0.422488ms
//    ***********************************************
//  SD eval time:0.6038365ms
//    ARRAY LENGTH 156*******************************************
//    Eval:0.8389139999999999ms
//    ***********************************************
//  AD time:1.9642469999999999ms
//    ***********************************************
//  AD eval time:0.8523529999999999ms
//    ***********************************************
//  ***********************************************
//  SD time:0.9254755ms
//    ***********************************************
//  SD eval time:0.42438899999999996ms
//    ARRAY LENGTH 170*******************************************
//    Eval:0.5396035ms
//    ***********************************************
//  AD time:0.8648155ms
//    ***********************************************
//  AD eval time:0.270266ms
//    ***********************************************
//  ***********************************************
//  SD time:0.39514299999999997ms
//    ***********************************************
//  SD eval time:0.3112255ms
//    ARRAY LENGTH 184*******************************************
//    Eval:0.5604945ms
//    ***********************************************
//  AD time:0.7862574999999999ms
//    ***********************************************
//  AD eval time:0.3530075ms
//    ***********************************************
//  ***********************************************
//  SD time:0.441712ms
//    ***********************************************
//  SD eval time:0.3740425ms
//    ARRAY LENGTH 198*******************************************
//    Eval:0.5340585ms
//    ***********************************************
//  AD time:0.8934694999999999ms
//    ***********************************************
//  AD eval time:0.35736049999999997ms
//    ***********************************************
//  ***********************************************
//  SD time:0.5207149999999999ms
//    ***********************************************
//  SD eval time:0.3324955ms
//    ARRAY LENGTH 212*******************************************
//    Eval:1.0442749999999998ms
//    ***********************************************
//  AD time:3.0025515ms
//    ***********************************************
//  AD eval time:1.354012ms
//    ***********************************************
//  ***********************************************
//  SD time:1.217847ms
//    ***********************************************
//  SD eval time:0.938425ms
//    ARRAY LENGTH 226*******************************************
//    Eval:1.904925ms
//    ***********************************************
//  AD time:1.4047045ms
//    ***********************************************
//  AD eval time:0.47329899999999997ms
//    ***********************************************
//  ***********************************************
//  SD time:0.599332ms
//    ***********************************************
//  SD eval time:0.42356649999999996ms
//    ARRAY LENGTH 226*******************************************
//    Eval:0.790376ms
//    ***********************************************
//  AD time:1.386129ms
//    ***********************************************
//  AD eval time:0.468595ms
//    ***********************************************
//  ***********************************************
//  SD time:0.632709ms
//    ***********************************************
//  SD eval time:0.46953249999999996ms
//    ARRAY LENGTH 240*******************************************
//    Eval:0.8560829999999999ms
//    ***********************************************
//  AD time:1.2838905ms
//    ***********************************************
//  AD eval time:0.5818544999999999ms
//    ***********************************************
//  ***********************************************
//  SD time:0.715183ms
//    ***********************************************
//  SD eval time:0.4569695ms
//    ARRAY LENGTH 254*******************************************
//    Eval:0.883076ms
//    ***********************************************
//  AD time:1.479889ms
//    ***********************************************
//  AD eval time:0.4610295ms
//    ***********************************************
//  ***********************************************
//  SD time:0.71143ms
//    ***********************************************
//  SD eval time:0.5423375ms
//    ARRAY LENGTH 282*******************************************
//    Eval:1.1956305ms
//    ***********************************************
//  AD time:4.4714145ms
//    ***********************************************
//  AD eval time:3.6541675ms
//    ***********************************************
//  ***********************************************
//  SD time:5.3864849999999995ms
//    ***********************************************
//  SD eval time:4.9467159999999994ms
//    ARRAY LENGTH 296*******************************************
//    Eval:3.7299075ms
//    ***********************************************
//  AD time:4.5147984999999995ms
//    ***********************************************
//  AD eval time:5.643768ms
//    ***********************************************
//  ***********************************************
//  SD time:2.6733504999999997ms
//    ***********************************************
//  SD eval time:1.3521705ms
//    ARRAY LENGTH 310*******************************************
//    Eval:3.307241ms
//    ***********************************************
//  AD time:7.5717665ms
//    ***********************************************
//  AD eval time:2.5573175ms
//    ***********************************************
//  ***********************************************
//  SD time:1.001013ms
//    ***********************************************
//  SD eval time:0.5912069999999999ms
//    ARRAY LENGTH 318*******************************************
//    Eval:1.45882ms
//    ***********************************************
//  AD time:2.219731ms
//    ***********************************************
//  AD eval time:0.8679425ms
//    ***********************************************
//  ***********************************************
//  SD time:1.048359ms
//    ***********************************************
//  SD eval time:0.9841705ms
//    len List(2, 16, 30, 44, 58, 72, 86, 100, 114, 128, 142, 156, 170, 184, 198, 212, 226, 226, 240, 254, 282, 296, 310, 318)

  def eval(exp: Seq[Expr], ad : Boolean = false, sd: Boolean = false) {

    var x = Param("x")

    var eval: List[Double] = List()

    for (a <- 0 to 19) {
      val t0 = System.nanoTime()
      DoubleEvaluator.eval(x * Array(exp, x.t))
      val t1 = System.nanoTime()
      eval = eval :+ ((t1 - t0))
    }

    eval = eval.sorted

    var vector = DoubleEvaluator.eval(x * Array(exp, x.t))

      var resEval = ((eval(9)+eval(10))*0.000001)/2
    //  evalAll.addOne(resEval)
      println( "Eval:" + resEval + "ms")

    if (ad == true) {
      var arrAD: List[Long] = List()
      for (a <- 0 to 19) {
        val t0 = System.nanoTime()
        (AutomaticDifferentiate.autodifferentiate(vector, x))
        val t1 = System.nanoTime()
//        println(a + "AD time:" + (t1 - t0) + "ns")
        arrAD = arrAD :+ (t1 - t0)
      }
      println("***********************************************")
      var AD = (AutomaticDifferentiate.autodifferentiate(vector, x))
      var ADeval = DoubleEvaluator.eval(AD)
      var arrADEval: List[Long] = List()
      for (a <- 0 to 19) {
        val t0 = System.nanoTime()
        Evaluator.printString(ADeval)
        val t1 = System.nanoTime()
        arrADEval = arrADEval :+ (t1 - t0)
      }

      var sortedADEval = arrADEval.sorted
      var sortedAD = arrAD.sorted
      var resAD =   ((sortedAD(9)+sortedAD(10))*0.000001)/2
    //  ADAll = ADAll :+resAD

      var resADEval =   ((sortedADEval(9)+sortedADEval(10))*0.000001)/2
     // ADEvalAll = ADEvalAll  :+ resADEval
      println( "AD time:" + resAD + "ms")

      println("***********************************************")

//      for(x<- sortedADEval){
        println( "AD eval time:" +  resADEval+ "ms")
//      }
    }


    println("***********************************************")
    println("***********************************************")

    if (sd == true) {
      var arrSD: List[Long] = List()
      for (a <- 0 to 19) {
        val t0 = System.nanoTime()
        DifferentiateExpr.differentiate(vector, x)
        val t1 = System.nanoTime()
       // println(a + "SD time:" + (t1 - t0)+ "ns")
        arrSD = arrSD:+(t1-t0)
      }

      var SD = DifferentiateExpr.differentiate(vector, x)
      var SDeval = DoubleEvaluator.eval(SD)
      var arrSDEval: List[Long] = List()
      for (a <- 0 to 19) {
        val t0 = System.nanoTime()
        Evaluator.printString(SDeval)
        val t1 = System.nanoTime()
        arrSDEval = arrSDEval:+(t1-t0)
//        println(a + "SD eval time:" + (t1 - t0)+ "ns")
      }

      var sortedSDEval = arrSDEval.sorted
      var sortedSD = arrSD.sorted

      var resSD =   ((sortedSD(9)+sortedSD(10))*0.000001)/2
    //  SDAll = SDAll :+resSD

      var resSDEval =   ((sortedSDEval(9)+sortedSDEval(10))*0.000001)/2
     // SDEvalAll = SDEvalAll  :+ resSDEval

//      for(x<- sortedSD){
        println( "SD time:" + resSD+ "ms")
//      }

      println("***********************************************")

//      for(x<- sortedSDEval){
        println( "SD eval time:" + resSDEval + "ms")
//      }
    }
  }

  def print(): Unit ={
//    println("eval "+evalAll)
//    println("AD "+ADAll)
//    println("ADEval "+ADEvalAll)
//    println("SD "+SDAll)
//    println("SDEval "+SDEvalAll)
  }
}

package evaluation

import automaticDifferentiation.AutomaticDifferentiate
import differentiate.DifferentiateExpr
import eval.{DoubleEvaluator, Evaluator}
import scala.collection.mutable
import scala.collection.mutable.Queue
import intermediateRep.{Vector, Expr, Param}


object ExprVectorScalar extends App {

  var evalAll: List[Double] = Nil
  var ADAll= Queue[Double]()
  var ADEvalAll= Queue[Double]()
  var SDAll= Queue[Double]()
  var SDEvalAll= Queue[Double]()
////
//  ARRAY LENGTH 2*******************************************
//    Eval:0.227654ms
//    ***********************************************
//  AD time:0.4125005ms
//    ***********************************************
//  AD eval time:0.159297ms
//    ***********************************************
//  ***********************************************
//  SD time:0.11740249999999999ms
//    ***********************************************
//  SD eval time:0.1227455ms
//
//    ARRAY LENGTH 16*******************************************
//    Eval:0.6164189999999999ms
//    ***********************************************
//  AD time:0.751103ms
//    ***********************************************
//  AD eval time:0.2511175ms
//    ***********************************************
//  ***********************************************
//  SD time:0.1116495ms
//    ***********************************************
//  SD eval time:0.2349185ms
//
//    ARRAY LENGTH 30*******************************************
//    Eval:0.384198ms
//    ***********************************************
//  AD time:0.5582475ms
//    ***********************************************
//  AD eval time:0.526704ms
//    ***********************************************
//  ***********************************************
//  SD time:0.158318ms
//    ***********************************************
//  SD eval time:0.44300449999999997ms
//
//    ARRAY LENGTH 44*******************************************
//    Eval:0.1778525ms
//    ***********************************************
//  AD time:0.5123635ms
//    ***********************************************
//  AD eval time:0.1802145ms
//    ***********************************************
//  ***********************************************
//  SD time:0.1471065ms
//    ***********************************************
//  SD eval time:0.178867ms
//
//    ARRAY LENGTH 58*******************************************
//    Eval:0.18520799999999998ms
//    ***********************************************
//  AD time:0.4507925ms
//    ***********************************************
//  AD eval time:0.14259449999999999ms
//    ***********************************************
//  ***********************************************
//  SD time:0.1156325ms
//    ***********************************************
//  SD eval time:0.14194199999999998ms
//
//    ARRAY LENGTH 72*******************************************
//    Eval:0.24892599999999998ms
//    ***********************************************
//  AD time:0.48695649999999996ms
//    ***********************************************
//  AD eval time:0.17579499999999998ms
//    ***********************************************
//  ***********************************************
//  SD time:0.148594ms
//    ***********************************************
//  SD eval time:0.176806ms
//
//    ARRAY LENGTH 86*******************************************
//    Eval:0.1944795ms
//    ***********************************************
//  AD time:0.54536ms
//    ***********************************************
//  AD eval time:0.2248405ms
//    ***********************************************
//  ***********************************************
//  SD time:0.20303849999999998ms
//    ***********************************************
//  SD eval time:0.3163815ms
//
//    ARRAY LENGTH 100*******************************************
//    Eval:0.48559599999999997ms
//    ***********************************************
//  AD time:1.180718ms
//    ***********************************************
//  AD eval time:0.535264ms
//    ***********************************************
//  ***********************************************
//  SD time:0.343751ms
//    ***********************************************
//  SD eval time:0.2555775ms
//
//    ARRAY LENGTH 114*******************************************
//    Eval:0.289535ms
//    ***********************************************
//  AD time:0.609891ms
//    ***********************************************
//  AD eval time:0.311557ms
//    ***********************************************
//  ***********************************************
//  SD time:0.2650145ms
//    ***********************************************
//  SD eval time:0.38366ms
//
//    ARRAY LENGTH 128*******************************************
//    Eval:0.40745499999999996ms
//    ***********************************************
//  AD time:1.3249164999999998ms
//    ***********************************************
//  AD eval time:0.25459ms
//    ***********************************************
//  ***********************************************
//  SD time:0.2867865ms
//    ***********************************************
//  SD eval time:0.23421199999999998ms
//
//    ARRAY LENGTH 142*******************************************
//    Eval:0.37620499999999996ms
//    ***********************************************
//  AD time:0.5310985ms
//    ***********************************************
//  AD eval time:0.2546465ms
//    ***********************************************
//  ***********************************************
//  SD time:0.227024ms
//    ***********************************************
//  SD eval time:0.4611415ms
//
//    ARRAY LENGTH 156*******************************************
//    Eval:0.8058464999999999ms
//    ***********************************************
//  AD time:2.16795ms
//    ***********************************************
//  AD eval time:0.852366ms
//    ***********************************************
//  ***********************************************
//  SD time:0.7633314999999999ms
//    ***********************************************
//  SD eval time:0.2543225ms
//
//    ARRAY LENGTH 170*******************************************
//    Eval:0.4756935ms
//    ***********************************************
//  AD time:0.992578ms
//    ***********************************************
//  AD eval time:0.33173199999999997ms
//    ***********************************************
//  ***********************************************
//  SD time:0.48943299999999995ms
//    ***********************************************
//  SD eval time:0.4638305ms
//
//    ARRAY LENGTH 184*******************************************
//    Eval:0.5805199999999999ms
//    ***********************************************
//  AD time:1.286489ms
//    ***********************************************
//  AD eval time:0.543646ms
//    ***********************************************
//  ***********************************************
//  SD time:0.4687995ms
//    ***********************************************
//  SD eval time:0.416699ms
//
//    ARRAY LENGTH 198*******************************************
//    Eval:0.683647ms
//    ***********************************************
//  AD time:1.3527879999999999ms
//    ***********************************************
//  AD eval time:0.222125ms
//    ***********************************************
//  ***********************************************
//  SD time:0.2929875ms
//    ***********************************************
//  SD eval time:0.215562ms
//
//    ARRAY LENGTH 212*******************************************
//    Eval:0.6475735ms
//    ***********************************************
//  AD time:1.9600415ms
//    ***********************************************
//  AD eval time:1.076621ms
//    ***********************************************
//  ***********************************************
//  SD time:1.4107904999999998ms
//    ***********************************************
//  SD eval time:0.926867ms
//
//    ARRAY LENGTH 226*******************************************
//    Eval:1.4971314999999998ms
//    ***********************************************
//  AD time:1.0038495ms
//    ***********************************************
//  AD eval time:0.4039525ms
//    ***********************************************
//  ***********************************************
//  SD time:0.527223ms
//    ***********************************************
//  SD eval time:0.415249ms
//
//    ARRAY LENGTH 226*******************************************
//    Eval:0.7343824999999999ms
//    ***********************************************
//  AD time:1.2068135ms
//    ***********************************************
//  AD eval time:0.416799ms
//    ***********************************************
//  ***********************************************
//  SD time:0.5980555ms
//    ***********************************************
//  SD eval time:0.4027685ms
//
//    ARRAY LENGTH 240*******************************************
//    Eval:1.0582615ms
//    ***********************************************
//  AD time:1.4615475ms
//    ***********************************************
//  AD eval time:0.5014495ms
//    ***********************************************
//  ***********************************************
//  SD time:0.6487025ms
//    ***********************************************
//  SD eval time:0.562524ms
//
//    ARRAY LENGTH 254*******************************************
//    Eval:0.9114215ms
//    ***********************************************
//  AD time:1.3374395ms
//    ***********************************************
//  AD eval time:0.417952ms
//    ***********************************************
//  ***********************************************
//  SD time:0.6869755ms
//    ***********************************************
//  SD eval time:0.463646ms
//
//    ARRAY LENGTH 282*******************************************
//    Eval:1.0396444999999999ms
//    ***********************************************
//  AD time:2.9451419999999997ms
//    ***********************************************
//  AD eval time:1.4653865ms
//    ***********************************************
//  ***********************************************
//  SD time:1.6064034999999999ms
//    ***********************************************
//  SD eval time:1.2967119999999999ms
//
//    ARRAY LENGTH 296*******************************************
//    Eval:2.194521ms
//    ***********************************************
//  AD time:6.3078235ms
//    ***********************************************
//  AD eval time:4.102443ms
//    ***********************************************
//  ***********************************************
//  SD time:1.9692889999999998ms
//    ***********************************************
//  SD eval time:0.48675549999999995ms
//
//    ARRAY LENGTH 310*******************************************
//    Eval:1.0930895ms
//    ***********************************************
//  AD time:1.859372ms
//    ***********************************************
//  AD eval time:0.765658ms
//    ***********************************************
//  ***********************************************
//  SD time:0.8234115ms
//    ***********************************************
//  SD eval time:0.689852ms
//
//    ARRAY LENGTH 318*******************************************
//    Eval:1.1826185ms
//    ***********************************************
//  AD time:2.0798555ms
//    ***********************************************
//  AD eval time:0.606329ms
//    ***********************************************
//  ***********************************************
//  SD time:1.1153195ms
//    ***********************************************
//  SD eval time:0.573881ms
//
//    ARRAY LENGTH 636*******************************************
//    Eval:3.8018365ms
//    ***********************************************
//  AD time:4.6242285ms
//    ***********************************************
//  AD eval time:1.779026ms
//    ***********************************************
//  ***********************************************
//  SD time:5.0384875ms
//    ***********************************************
//  SD eval time:4.499419ms
  def eval(exp: Seq[Expr], ad : Boolean = false, sd: Boolean = false) {

    var x = Param("x")

    var eval: List[Double] = List()

    for (a <- 0 to 19) {
      val t0 = System.nanoTime()
      DoubleEvaluator.eval(x * Vector(exp, x.t))
      val t1 = System.nanoTime()
      eval = eval :+ ((t1 - t0))
    }

    eval = eval.sorted

    var vector = DoubleEvaluator.eval(x * Vector(exp, x.t))

      var resEval = ((eval(9)+eval(10))*0.000001)/2
      //evalAll =  (resEval) ::evalAll
      println( "Eval:" + resEval + "ms")

    if (ad == true) {
      var arrAD: List[Long] = List()
      for (a <- 0 to 19) {
        val t0 = System.nanoTime()
        (AutomaticDifferentiate.autodifferentiate(vector, x))
        val t1 = System.nanoTime()
//        println(a + "AD time:" + (t1 - t0) + "ns")
        arrAD = arrAD :+ (t1 - t0)
      }
      println("***********************************************")
      var AD = (AutomaticDifferentiate.autodifferentiate(vector, x))
      var ADeval = DoubleEvaluator.eval(AD)
      var arrADEval: List[Long] = List()
      for (a <- 0 to 19) {
        val t0 = System.nanoTime()
        Evaluator.printString(ADeval)
        val t1 = System.nanoTime()
        arrADEval = arrADEval :+ (t1 - t0)
      }

      var sortedADEval = arrADEval.sorted
      var sortedAD = arrAD.sorted
      var resAD =   ((sortedAD(9)+sortedAD(10))*0.000001)/2
      //ADAll = ADAll :+resAD

      var resADEval =   ((sortedADEval(9)+sortedADEval(10))*0.000001)/2
     // ADEvalAll = ADEvalAll  :+ resADEval
      println( "AD time:" + resAD + "ms")

      println("***********************************************")

//      for(x<- sortedADEval){
        println( "AD eval time:" +  resADEval+ "ms")
//      }
    }


    println("***********************************************")
    println("***********************************************")

    if (sd == true) {
      var arrSD: List[Long] = List()
      for (a <- 0 to 19) {
        val t0 = System.nanoTime()
        DifferentiateExpr.differentiate(vector, x)
        val t1 = System.nanoTime()
       // println(a + "SD time:" + (t1 - t0)+ "ns")
        arrSD = arrSD:+(t1-t0)
      }

      var SD = DifferentiateExpr.differentiate(vector, x)
      var SDeval = DoubleEvaluator.eval(SD)
      var arrSDEval: List[Long] = List()
      for (a <- 0 to 19) {
        val t0 = System.nanoTime()
        Evaluator.printString(SDeval)
        val t1 = System.nanoTime()
        arrSDEval = arrSDEval:+(t1-t0)
//        println(a + "SD eval time:" + (t1 - t0)+ "ns")
      }

      var sortedSDEval = arrSDEval.sorted
      var sortedSD = arrSD.sorted

      var resSD =   ((sortedSD(9)+sortedSD(10))*0.000001)/2
    //  SDAll = SDAll :+resSD

      var resSDEval =   ((sortedSDEval(9)+sortedSDEval(10))*0.000001)/2
     // SDEvalAll = SDEvalAll  :+ resSDEval

//      for(x<- sortedSD){
      println( "SD time:" + resSD+ "ms")
//      }

      println("***********************************************")

//      for(x<- sortedSDEval){
      println( "SD eval time:" + resSDEval + "ms")
      println()
//      }
    }
  }

  def print(): Unit ={
//    println("eval "+evalAll)
//    println("AD "+ADAll)
//    println("ADEval "+ADEvalAll)
//    println("SD "+SDAll)
//    println("SDEval "+SDEvalAll)
  }
}
